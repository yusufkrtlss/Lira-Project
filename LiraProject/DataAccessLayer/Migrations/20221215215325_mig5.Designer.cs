// <auto-generated />
using System;
using DataAccessLayer.Concrete.EntityFramework.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(LiraDb))]
    [Migration("20221215215325_mig5")]
    partial class mig5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityLayer.Concrete.Companies", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<double>("CompanyBalance")
                        .HasColumnType("float");

                    b.Property<double>("CompanyEBITDA")
                        .HasColumnType("float");

                    b.Property<double>("CompanyIncomeStatement")
                        .HasColumnType("float");

                    b.Property<string>("CompanyInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CompanyPriceGainRate")
                        .HasColumnType("float");

                    b.Property<double>("CompanyProfit")
                        .HasColumnType("float");

                    b.Property<double>("CompanyRegularMarketChange")
                        .HasColumnType("float");

                    b.Property<double>("CompanyRegularMarketChangePercent")
                        .HasColumnType("float");

                    b.Property<double>("CompanyRegularMarketDayHigh")
                        .HasColumnType("float");

                    b.Property<double>("CompanyRegularMarketDayLow")
                        .HasColumnType("float");

                    b.Property<double>("CompanyRegularMarketPrice")
                        .HasColumnType("float");

                    b.Property<double>("CompanyRegularMarketVolume")
                        .HasColumnType("float");

                    b.Property<string>("CompanySymbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<DateTime>("CustomerCreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CustomerModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CustomerStatus")
                        .HasColumnType("bit");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Favorites", b =>
                {
                    b.Property<int>("FavoriteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteID"));

                    b.Property<int>("CompaniesCompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("FavoriteID");

                    b.HasIndex("CompaniesCompanyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Graphs", b =>
                {
                    b.Property<int>("GraphId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GraphId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("GraphName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GraphId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Graphs");
                });

            modelBuilder.Entity("EntityLayer.Concrete.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NewsId"));

                    b.Property<int>("CompaniesCompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("NewsCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewsInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewsId");

                    b.HasIndex("CompaniesCompanyId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Share", b =>
                {
                    b.Property<int>("ShareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShareId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ShareName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("SharePrice")
                        .HasColumnType("real");

                    b.Property<string>("ShareShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShareType")
                        .HasColumnType("int");

                    b.HasKey("ShareId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Favorites", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Companies", "Companies")
                        .WithMany("Favorites")
                        .HasForeignKey("CompaniesCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Customer", "Customer")
                        .WithMany("Favorites")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Companies");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Graphs", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Companies", "Company")
                        .WithMany("Graphs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("EntityLayer.Concrete.News", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Companies", "Companies")
                        .WithMany("News")
                        .HasForeignKey("CompaniesCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Companies");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Share", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Companies", "Company")
                        .WithMany("Shares")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Companies", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Graphs");

                    b.Navigation("News");

                    b.Navigation("Shares");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Customer", b =>
                {
                    b.Navigation("Favorites");
                });
#pragma warning restore 612, 618
        }
    }
}
